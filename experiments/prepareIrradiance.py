# This script prepares irradiances generated by NEUVAC in preparation for comparison to other sources. Those other
# sources include: EUVAC, HEUVAC, FISM1, FISM2, and TIMED/SEE.

#-----------------------------------------------------------------------------------------------------------------------
# Top-level Imports:
import numpy as np
import os
import matplotlib
matplotlib.use('Qt5Agg')
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
from datetime import datetime
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Local Imports:
from NEUVAC.src import neuvac
from empiricalModels.models.EUVAC import euvac
from empiricalModels.models.HEUVAC import heuvac
from tools.EUV.fism2_process import read_euv_csv_file
from tools.processIrradiances import obtainFism1
from tools.processIrradiances import obtainFism2
from tools.processIrradiances import obtainSEE, rebinSEE
from tools.processIrradiances import obtainNRLSSIS2, rebinNRL
from tools import toolbox
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Directory Management
neuvac_directory = '../NEUVAC/src/'
neuvac_tableFile = '../NEUVAC/src/neuvac_table.txt'
figures_directory = 'Figures/'
results_directory = 'Results/'
fism1_spectra_folder = '../empiricalModels/irradiances/FISM1/'
fism2_spectra_folder = '../empiricalModels/irradiances/FISM2/'
euv_folder = '../tools/EUV/'
preparedDataFolder = '../experiments/preparedData'
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Constants
euvacTable = euvac.euvacTable
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Execution
if __name__=="__main__":
    # Load in F10.7 data (Penticton, CA):
    pentictonTimesData = '../solarIndices/F107/Penticton/F107times.pkl'
    pentictonF107Data = '../solarIndices/F107/Penticton/F107vals.pkl'
    pentictonF107AveData = '../solarIndices/F107/Penticton/F107averageVals.pkl'
    pentictonTimes = toolbox.loadPickle(pentictonTimesData)
    pentictonF107 = toolbox.loadPickle(pentictonF107Data)
    pentictonF107A = toolbox.loadPickle(pentictonF107AveData)
    # F10.7 data extends between 1947-02-14; 12:00 to 2008-02-03; 12:00.
    # Load in F10.7 data (OMNIWeb):
    omniTimesData = '../solarIndices/F107/OMNIWeb/OMNIF107times.pkl'
    omniF107Data = '../solarIndices/F107/OMNIWeb/OMNIF107vals.pkl'
    omniF107AveData = '../solarIndices/F107/OMNIWeb/OMNIF107averageVals.pkl'
    omniTimes = toolbox.loadPickle(omniTimesData)
    omniF107 = toolbox.loadPickle(omniF107Data)
    omniF107A = toolbox.loadPickle(omniF107AveData)
    # F10.7 data extends between 1963-11-28; 12:00 to 2023-09-27; 12:00.
    times = omniTimes
    F107 = omniF107
    F107A = omniF107A

    # NOTE: NEUVAC, EUVAC, and HEUVAC return spectral fluxes. They'll need to be converted to spectral irradiance.

    # NEUVAC Results:
    # neuvacFlux, neuvacIrr = neuvac.neuvacEUV(F107, F107A, tableFile=neuvac_tableFile)
    # neuvacIrrCal = neuvacIrr.copy()
    #
    # # NEUVAC calibration:
    # correctionDataIndices = [element[0] for element in correctionDataTuples]
    # correctionDataValues = [element[1] for element in correctionDataTuples]
    # for i in range(neuvacIrr.shape[1]):
    #     if i in correctionDataIndices:
    #         validIndex = np.where(np.asarray(correctionDataIndices) == i)[0][0]
    #         neuvacIrrCal[:, i] = neuvacIrrCal[:, i]/correctionDataValues[validIndex]

    # Correlation matrix:
    # neuvacCorr = toolbox.covariates(neuvacIrr) # Correlation matrix

    # EUVAC Results:
    # euvacRes = euvac.euvac(F107, F107A)

    # HEUVAC Results:
    # heuvacRes = heuvac.heuvac(F107, F107A)

    # 3D plotting of NEUVAC, EUVAC, and HEUVAC:
    # bandIndicesNEUVAC = np.linspace(0, neuvacRes.shape[1], neuvacRes.shape[1]+1)
    # bandIndicesEUVAC = np.linspace(0, euvacRes.shape[1], euvacRes.shape[1]+1)
    # fig = plt.figure()
    # ax = fig.add_subplot(111, projection='3d')
    # # NEUVAC
    # for i in range(0, 37): # (neuvacRes.shape[1]):
    #     xvals = np.full_like(neuvacRes[:, i], fill_value=bandIndicesNEUVAC[i])
    #     yvals = np.linspace(0, neuvacRes.shape[0]-1, neuvacRes.shape[0])
    #     plt.plot(xvals, yvals, neuvacRes[:, i]/1e1, 'b-')
    # # EUVAC
    # for i in range(euvacRes.shape[1]): # (neuvacRes.shape[1]):
    #     xvals = np.full_like(euvacRes[:, i], fill_value=bandIndicesEUVAC[i])
    #     yvals = np.linspace(0, euvacRes.shape[0]-1, euvacRes.shape[0])
    #     plt.plot(xvals, yvals, euvacRes[:, i], 'g-')
    # # HEUVAC
    # for i in range(heuvacRes.shape[1]):  # (neuvacRes.shape[1]):
    #     xvals = np.full_like(heuvacRes[:, i], fill_value=bandIndicesEUVAC[i])
    #     yvals = np.linspace(0, heuvacRes.shape[0] - 1, heuvacRes.shape[0])
    #     plt.plot(xvals, yvals, heuvacRes[:, i], 'r-')
    # plt.show()

    # FISM1 Results:
    euv_data_59 = read_euv_csv_file(euv_folder + 'euv_59.csv', band=False)
    mids = 0.5 * (euv_data_59['long'] + euv_data_59['short'])
    # myFism1Files = os.listdir(fism1_spectra_folder)
    # myTimesFISM1, myIrradianceFISM1 = obtainFism1(myFism1Files, euv_data_59, saveLoc=fism1_spectra_folder)
    # # FISM1 data extends between 1990-01-01; 00:00 and 2018-04-10; 00:00.

    # Compute correction factors (by band), from ratios between NEUVAC and FISM1:
    # A: Isolate the times that NEUVAC corresponds to FISM1:
    # relevantNEUVACTimes = []
    # relevantNEUVACIndices = []
    # for i in range(len(myTimesFISM1)):
    #     res = toolbox.find_nearest(times, myTimesFISM1[i])
    #     relevantNEUVACTimes.append( times[res[0]] )
    #     relevantNEUVACIndices.append( res[0] )
    # neuvacIrrSubset = neuvacIrr[relevantNEUVACIndices, :]
    # neuvacFism1Ratios = np.divide(neuvacIrrSubset, myIrradianceFISM1)
    # meanFactors = []
    # for i in range(neuvacFism1Ratios.shape[-1]):
    #     meanFactors.append( np.nanmean(neuvacFism1Ratios[:, i][~np.isnan(neuvacFism1Ratios[:, i])]) )
    # plt.figure()
    # for i in range(neuvacFism1Ratios.shape[-1]):
    #     plt.plot(neuvacFism1Ratios[:, i])
    # # B: Apply the corrections:
    # correctedNeuvacIrr = []
    # for i in range(neuvacIrr.shape[-1]):
    #     correctedNeuvacIrr.append(neuvacIrr[:, i] / meanFactors[i])
    # correctedNeuvacIrr = np.asarray(correctedNeuvacIrr).T

    # FISM2 Results:
    fism2file = '../empiricalModels/irradiances/FISM2/daily_data_1947-2023.nc'
    myIrrTimesFISM2, myIrrDataAllFISM2, myIrrUncAllFISM2 = obtainFism2(fism2file, euv_data_59, saveLoc=fism2_spectra_folder)
    # FISM2 data extends between 1947-02-14; 00:00 and 2023-08-29; 00:00.

    # NRLSSI2 Results:
    # NRLFile = '../empiricalModels/irradiances/NRLSSI2/ssi_v02r01_daily_s18820101_e20221231_c20230123.nc'
    # datetimesNRL, wavelengthsNRL, bandwidthsNRL, irradiancesNRL, uncertaintiesNRL = obtainNRLSSIS2(NRLFile)
    # rebinnedNRLData = rebinNRL(irradiancesNRL, euv_data_59, wavelengthsNRL, bandwidthsNRL)

    # TIMED/SEE Data:
    seeFile = '../measurements/TIMED_SEE_Level_3/see_L3_merged_1947-2023.ncdf'
    myIrrTimesSEE, mySEEWavelengths, myIrrDataAllSEE, myIrrUncAllSEE = obtainSEE(seeFile)
    rebinnedIrrData = rebinSEE(myIrrDataAllSEE, euv_data_59)
    # Replace bad values (zeros) with NaNs:
    rebinnedIrrDataFixed = rebinnedIrrData.copy()
    rebinnedIrrDataFixed[rebinnedIrrDataFixed == 0] = np.nan
    # TIMED/SEE data extends between 2002-01-22;12:00 and 2023-08-27; 12:00.

    # Perform a non-linear fit between F10.7, F10.7A and TIMED/SEE (valid for 55 of the 59 bins; excludes the first 4):
    neuvacTableSEE = neuvac.neuvacFit([times, F107, F107A], myIrrTimesSEE, rebinnedIrrDataFixed[:, 4:], wavelengths=mids[4:], label='TIMED/SEE')
    # Perform a non-lienar fit between F10.7, F10.7A, and FISM2 (valid for the first 4 of the 59 bins):
    neuvacTableFISM2 = neuvac.neuvacFit([times, F107, F107A], myIrrTimesFISM2, myIrrDataAllFISM2[:, :4], wavelengths=mids[:4], label='FISM2')

    # Collect the coefficients into a table (so they can be assembled for use in a function):
    neuvacTableSEEArr = np.asarray(neuvacTableSEE)
    neuvacTableFISM2Arr = np.asarray(neuvacTableFISM2)
    neuvacTable = np.concatenate((neuvacTableFISM2Arr, neuvacTableSEE), axis=0)
    # Print the coefficients to a file:
    with open(neuvac_directory+'neuvac_table.txt', 'w') as output:
        # Write the header information:
        output.write('This file contains coefficients for the current iteration of NEUVAC.\n'
                     'This file was created on '+datetime.strftime(datetime.now(), '%Y-%m-%dT%H:%M:%S')+'\n'
                     'File Authors: Brandt, Daniel A. and Ridley, Aaron J.\n'
                     'This version of NEUVAC was created by fitting nonlinear models between F10.7 and centered\n'
                     '81-day averaged F10.7 and: FISM2 (in the first 4 bands) and TIMED/SEE (in the remaining 55\n'
                     'bands.\n'
                     'The file is formatted as follows:\n'
                     ' - First Column: Lower limit of the given wavelength bin in Angstroms.\n'
                     ' - Second Column: Upper limit of the given wavelength bin in Angstroms.\n'
                     ' - Third through Eighth colummns: Coefficients for the model.\n'
                     'The functional form of the model is given by:\n'
                     'Irr_i(t) = A_i * (F107(t) ** B_i) + C_i * (F107A(t) ** D_i) + E_i * (F107A(t) - F107(t)) + F_i\n'
                     'where the irradiance in bin i (Irr_i) is a function of time t, and A_i through F_i are \n'
                     'coefficients for bin i, and F107(t) and F107A(t) represent values of the F10.7 and 81-day\n'
                     'averaged F10.7 centered on the current day, respectively.\n'
                     '-----------------------------------------------------------------------------------------------\n'
                     'WAVES WAVEL A_i B_i C_i D_i E_i F_i\n')
        for i in range(neuvacTable.shape[0]):
            output.writelines(str(euv_data_59['short'][i])+' '+str(euv_data_59['long'][i])+' '+toolbox.stringList(neuvacTable[i, :])+'\n')


    # ------------------------------------------------------------------------------------------------------------------
    # # Plot the spectra for a single day:
    # neuvacBands = np.flipud(neuvac.waveTable)
    # neuvacBinWidths = neuvacBands[:, 1] - neuvacBands[:, 0]
    # neuvacMids = 0.5*(neuvacBands[:, 0] + neuvacBands[:, 1])
    # chosenTime = times[-1000] # [-1000]
    # locNEUVAC = toolbox.find_nearest(times, chosenTime)
    # locFISM1 = toolbox.find_nearest(myTimesFISM1, chosenTime)
    # locFISM2 = toolbox.find_nearest(myIrrTimesFISM2, chosenTime)
    # locSEE = toolbox.find_nearest(myIrrTimesSEE, chosenTime)
    #
    # plt.figure()
    # # Multiply NEUVAC by bin widths; plot everything else as normal:
    # # modifiedNeuvacIrr = np.asarray([a*b for a,b in zip(neuvacIrr[locNEUVAC[0], :], neuvacBinWidths)])
    # # modifiedNeuvacIrr = np.asarray([a*b for a,b in zip(neuvacFlux[locNEUVAC[0], :], neuvacBinWidths)])#, label='NEUVAC', marker='o') # neuvacIrr[locNEUVAC[0], :]
    # # Find the non-singular bins and modify the spectrum:
    # # inds = np.where(neuvacBinWidths != 0)
    # # modifiedNeuvacIrr = neuvacIrr[locNEUVAC[0], :][inds]*5
    # plt.plot(neuvacMids, rebinnedIrrData[locSEE[0], :], label='SEE', marker='o')
    # plt.plot(neuvacMids, neuvacIrr[locNEUVAC[0], :], label='NEUVAC', marker='o', linestyle=None) # modifiedNeuvacIrr
    #
    # # plt.plot(neuvacMids, neuvacIrrCal[locNEUVAC[0], :], label='Calibrated NEUVAC', marker='o', linestyle=None)
    # #plt.plot(neuvacMids, correctedNeuvacIrr[locNEUVAC[0], :], label='Corrected NEUVAC', marker='o', linestyle=None)
    #
    # plt.plot(neuvacMids, myIrradianceFISM1[locFISM1[0], :], label='FISM1', marker='o')
    #
    # # Plot the ratio:
    # # plt.plot(neuvacMids, np.divide(neuvacIrr[locNEUVAC[0], :], myIrradianceFISM1[locFISM1[0], :]), label='Ratio', marker='o', linestyle=None)
    # # plt.plot(neuvacMids, myIrrDataAllFISM2[locFISM2[0], :], label='FISM2', marker='o')
    # # Plot vertical lines at select locations:
    # # vertInds = [3, 6, 9, 43, 46, 48, 52, 55]
    # # for index in vertInds:
    # #     plt.axvline(x=neuvacMids[index], linestyle='--', color='k')
    # # plt.plot(neuvacMids, neuvacIrr[locNEUVAC[0], :], marker='o', color='b', linestyle=None)
    # plt.xlabel('Wavelength (Angstroms)')
    # plt.ylabel('Irradiance')
    # plt.title('Spectrum for '+datetime.strftime(chosenTime, '%Y-%m-%dT%H:%M:%S'))
    # plt.legend(loc='best')
    # # Spectrum Ratio (SEE/NEUVAC):
    # # ratioVals = np.divide(rebinnedIrrData[locSEE[0], :], neuvacIrr[locNEUVAC[0], :])
    # # modifiedRatioVals = ratioVals[inds]*5
    # # plt.figure()
    # # plt.plot(neuvacMids[inds], modifiedRatioVals)
    # # plt.suptitle('SEE/NEUVAC Spectrum Ratio for ' + datetime.strftime(chosenTime, '%Y-%m-%dT%H:%M:%S')+'(No Singular Bands)')
    #
    # # ------------------------------------------------------------------------------------------------------------------
    # # ANALYSIS OF RESIDUALS:
    # # Identify the bands in SEE to actually consider:
    # goodBands = rebinnedIrrData.any(0)
    # # Comparison to TIMED/SEE ONLY:
    # F107indices = np.where((times >= myIrrTimesSEE[0]) & (times <= myIrrTimesSEE[-1]))[0]
    # F107TimesSeeSubset= times[F107indices]
    # F107SeeSubset = F107[F107indices]
    # F107ASubset = F107A[F107indices]
    # neuvacSubset = neuvacIrr[F107indices, :]
    # neuvacSubset = neuvacSubset[:, goodBands]
    # correctedNeuvacSubset = correctedNeuvacIrr[F107indices, :]
    # correctedNeuvacSubset = correctedNeuvacSubset[:, goodBands]
    # # Find elements in TIMED/SEE data nearest to the subsetted F107 times:
    # closestSeeInds = []
    # closestSeeTimes = []
    # for timestamp in F107TimesSeeSubset:
    #     res = toolbox.find_nearest(myIrrTimesSEE, timestamp)
    #     closestSeeInds.append(res[0])
    #     closestSeeTimes.append( res[1] )
    # closestSeeInds = np.asarray(closestSeeInds)
    # closestSeeTimes = np.asarray(closestSeeTimes)
    # closestSeeVals = rebinnedIrrDataFixed[closestSeeInds, :]
    # closestSeeVals = closestSeeVals[:, goodBands]
    # # Compute residuals:
    # neuvacResids = np.subtract(neuvacSubset, closestSeeVals)
    # # Sort the residuals by F10.7:
    # orderedF107SubsetInds = np.argsort(F107SeeSubset)
    #
    # # Plot the time series of irradiance for NEUVAC and TIMED/SEE for each band:
    # for i in range(neuvacBands.shape[0]):
    #     # 10-225, 11-256.3
    #     # Indexing and subsetting for two neighboring (specific) bands:
    #     # yearStart = datetime(1996, 1, 1)
    #     # yearEnd = datetime(2006, 1, 1)
    #     # subInds = np.where((times >= yearStart) & (times <= yearEnd))[0]
    #     # subIndsSEE = np.where((myIrrTimesSEE >= yearStart) & (myIrrTimesSEE <= yearEnd))[0]
    #     # subIndsFISM1 = np.where((myTimesFISM1 >= yearStart) & (myTimesFISM1 <= yearEnd))[0]
    #     # i=10
    #     # fig, ax = plt.subplots(2, 2, figsize=(12, 8), sharex=True)
    #     # ax[0, 0].plot(myIrrTimesSEE[subIndsSEE], rebinnedIrrDataFixed[:, i][subIndsSEE], label='SEE')
    #     # ax[0, 0].plot(times[subInds], neuvacIrr[:, i][subInds], label='NEUVAC')
    #     # ax[0, 0].plot(myTimesFISM1[subIndsFISM1], myIrradianceFISM1[:, i][subIndsFISM1], label='FISM1')
    #     # ax[1, 0].plot(times[subInds], F107[subInds], 'r-', label='F10.7')
    #     # ax[1, 0].plot(times[subInds], F107A[subInds], 'c--', label='F10.7A')
    #     # ax[1, 0].legend(loc='best')
    #     # ax[0, 0].set_title('Irradiance Timeseries: ' + str(neuvacMids[i]) + ' Angstroms')
    #     # ax[0, 0].legend(loc='best')
    #     # ax[0, 0].set_xlabel('Time')
    #     # ax[0, 0].set_ylabel('Irradiance (W/m$^2$)')
    #     # #
    #     # ax[0, 1].plot(myIrrTimesSEE[subIndsSEE], rebinnedIrrDataFixed[:, i+1][subIndsSEE], label='SEE')
    #     # ax[0, 1].plot(times[subInds], neuvacIrr[:, i+1][subInds], label='NEUVAC')
    #     # ax[0, 1].plot(myTimesFISM1[subIndsFISM1], myIrradianceFISM1[:, i+1][subIndsFISM1], label='FISM1')
    #     # ax[1, 1].plot(times[subInds], F107[subInds], 'r-', label='F10.7')
    #     # ax[1, 1].plot(times[subInds], F107A[subInds], 'c--', label='F10.7A')
    #     # ax[1, 1].legend(loc='best')
    #     # ax[0, 1].set_title('Irradiance Timeseries: ' + str(neuvacMids[i+1]) + ' Angstroms')
    #     # ax[0, 1].legend(loc='best')
    #     # ax[0, 1].set_xlabel('Time')
    #
    #     # Time series for an individual band:
    #     plt.figure()
    #     plt.plot(myIrrTimesSEE, rebinnedIrrDataFixed[:, i], label='SEE')
    #     plt.plot(times, neuvacIrrCal[:, i], label='NEUVAC')
    #     plt.plot(myTimesFISM1, myIrradianceFISM1[:, i], label='FISM1')
    #     if i == 12:
    #         plt.ylim([0, 0.0012])
    #     if i == 13:
    #         plt.ylim([0, 0.00175])
    #     if i == 16:
    #         plt.ylim([0, 0.0019])
    #     plt.suptitle('Irradiance Timeseries: ' + str(neuvacMids[i]) + ' Angstroms')
    #     plt.legend(loc='best')
    #     plt.savefig(figures_directory + 'irradianceTimeSeries_' + str(neuvacMids[i]) + '_Angstroms.png',
    #                 dpi=300)
    #
    # # Plot the residuals in each band as function of F10.7:
    # modelParams = []
    # RMSvalsByBand = []
    # for i in range(neuvacResids.shape[1]):
    #     sampleF107 = np.linspace(np.nanmin(F107SeeSubset[orderedF107SubsetInds][0]), np.nanmax(F107SeeSubset[orderedF107SubsetInds][-1]), num=100)
    #     modelResults = toolbox.bestPolyfit(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i], func='exp')
    #     # modelResults = toolbox.bestPolyfit(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i])
    #     plt.figure()
    #     plt.plot(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i], 'bo')
    #     # plt.plot(sampleF107, modelResults[0](sampleF107), 'r-', label='Model Fit (order = '+str(modelResults[2])+')')
    #     plt.plot(sampleF107, modelResults[0][0](sampleF107, *modelResults[0][1]), 'r-',
    #             label='Exponential Model Fit')
    #     plt.plot([], [], color='w', alpha=0, label='R='+str(modelResults[1]))
    #     plt.suptitle('Residuals vs. F10.7: Band '+str(i+1))
    #     plt.legend(loc='best')
    #     figname = 'neuvacVsF107_Band_'+str(i+1)+'.png'
    #     plt.savefig(figures_directory+figname, dpi=300)
    #     rms = mean_squared_error(neuvacSubset[:, i][~np.isnan(closestSeeVals[:, i])], closestSeeVals[:, i][~np.isnan(closestSeeVals[:, i])], squared=False)
    #     modelParams.append(modelResults[0])
    #     RMSvalsByBand.append(rms)
    #
    # # Display the RMS by band:
    # goodNeuvacBands = neuvacBands[goodBands, :]
    # neuvacBandsMids = 0.5*(goodNeuvacBands[:, 1] + goodNeuvacBands[:, 0])
    # plt.figure(figsize=(10,8))
    # plt.plot(neuvacBandsMids[np.argsort(neuvacBandsMids)], np.asarray(RMSvalsByBand)[np.argsort(neuvacBandsMids)], 'o-')
    # plt.xlabel('Wavelength (Angstroms)')
    # plt.ylabel('RMS Error (W/m$^2$/nm)')
    # plt.title('EUV Irradiance RMSE vs. Band')
    # plt.savefig(figures_directory+'RMSE_vs_band.png', dpi=300)
    #
    # # Compute the RMS in each band as a function of F10.7, by binning F10.7 into 10 sfu intervals:
    # for i in range(neuvacResids.shape[1]):
    #     myTitleStr = 'RMSE vs. F10.7: '+str(neuvacBandsMids[i])+' Angstroms'
    #     F107Bins, binRMSE = toolbox.binRMSE(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i], closestSeeVals[:, i], step=10, saveLoc=figures_directory, titleStr=str(neuvacBandsMids[i]), normalize=True)
    #
    # # ------------------------------------------------------------------------------------------------------------------
    # # ANALYSIS FOR SELECT WAVELENGTH BANDS (one near 10A, 100A, and 1000A)
    #
    # # Time series plot:
    # for bandIndex in range(neuvacIrr.shape[1]):
    #     plt.figure()
    #     plt.plot(times, neuvacIrr[:, bandIndex], label='NEUVAC')
    #     plt.plot(myIrrTimesFISM2, myIrrDataAllFISM2[:, bandIndex], label='FISM2')
    #     plt.plot(myIrrTimesSEE, rebinnedIrrDataFixed[:, bandIndex], label='SEE')
    #     plt.legend(loc='best')
    #     plt.title('Irradiance vs Time: Band '+str(bandIndex+1)+' ('+str(neuvacMids[bandIndex])+'Angstroms)')
    #     plt.savefig(figures_directory+'Resids/IrrTimeSeries_Band'+str(bandIndex+1)+'.png', dpi=300)
    #
    # # 1. SEE measurements vs F107 and NEUVAC vs F107 on the same plot.  You can color code the dots. (This would be used for a paper)
    # residsDir = figures_directory+'Resids/'
    # # Isolate the bands 8-16A (12A - 0th band), 100-150A (125A - 5th band), and 1000-1050A (1025A - 39th band):
    # chosenBands = [18, 32, 41]
    # for bandIndex in chosenBands:
    #     plt.figure(figsize=(12, 8))
    #     # NEUVAC:
    #     plt.scatter(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[orderedF107SubsetInds, bandIndex], color='b', label='NEUVAC')
    #     # TIMED/SEE:
    #     plt.scatter(F107SeeSubset[orderedF107SubsetInds], closestSeeVals[orderedF107SubsetInds, bandIndex], color='r', label='TIMED/SEE')
    #     # Labels:
    #     titleFontSize = 20
    #     fontSize = 18
    #     labelSize = 16
    #     plt.xlabel('F10.7 (sfu)', fontsize=fontSize)
    #     plt.ylabel('Solar Spectral Irradiance (W/m$^2$/nm)', fontsize=fontSize)
    #     plt.suptitle('Irradiance vs. F10.7: '+str(neuvacBandsMids[bandIndex])+' Angstroms', fontsize=titleFontSize)
    #     plt.tick_params(axis='both', labelsize=labelSize)
    #     plt.legend(loc='best', fontsize=fontSize)
    #     plt.savefig(residsDir + 'Irr_vs_F107_'+str(neuvacBandsMids[bandIndex])+'.png', dpi=300)
    #
    # # 2. NEUVAC - SEE measurements vs F107 as scatter plot (for the paper)
    # for bandIndex in chosenBands:
    #     plt.figure(figsize=(14, 8))
    #     plt.scatter(F107SeeSubset[orderedF107SubsetInds], neuvacResids[orderedF107SubsetInds, bandIndex], color='m')
    #     # Labels:
    #     titleFontSize = 20
    #     fontSize = 18
    #     labelSize = 16
    #     plt.xlabel('F10.7 (sfu)', fontsize=fontSize)
    #     plt.ylabel('NEUVAC - SEE (W/m$^2$/nm)', fontsize=fontSize)
    #     plt.suptitle('NEUVAC - SEE vs. F10.7: '+str(neuvacBandsMids[bandIndex])+' Angstroms', fontsize=titleFontSize)
    #     plt.tick_params(axis='both', labelsize=labelSize)
    #     plt.savefig(residsDir + 'Irr_Resids_vs_F107_'+str(neuvacBandsMids[bandIndex])+'.png', dpi=300)
    #
    # # 3. (NEUVAC - SEE measurements)^2 vs F107 as scatter plot (intermediate plot)
    # for bandIndex in chosenBands:
    #     plt.figure(figsize=(12, 8))
    #     plt.scatter(F107SeeSubset[orderedF107SubsetInds], np.square(neuvacResids[orderedF107SubsetInds, bandIndex]), color='m')
    #     # Labels:
    #     titleFontSize = 20
    #     fontSize = 18
    #     labelSize = 16
    #     plt.xlabel('F10.7 (sfu)', fontsize=fontSize)
    #     plt.ylabel('(NEUVAC - SEE)$^2$ (W$^2$/m$^4$/nm$^2$)', fontsize=fontSize)
    #     plt.suptitle('(NEUVAC - SEE)$^2$ vs. F10.7: '+str(neuvacBandsMids[bandIndex])+' Angstroms', fontsize=titleFontSize)
    #     plt.tick_params(axis='both', labelsize=labelSize)
    #     plt.savefig(residsDir + 'Irr_Squared_Diff_vs_F107_' + str(neuvacBandsMids[bandIndex]) + '.png', dpi=300)
    #
    # # 4. (NEUVAC - SEE measurements)^2 vs F107 as scatter plot (as in 3) with 10 sfu bin averages of the (N-S)^2 values (intermediate plot)
    # for bandIndex in chosenBands:
    #     myTitleStr = 'Squared Differences vs. Binned F10.7: ' + str(neuvacBandsMids[bandIndex]) + ' Angstroms'
    #     F107Bins, binRMSE = toolbox.binCorrelation(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, bandIndex],
    #                                         closestSeeVals[:, bandIndex], step=10, saveLoc=residsDir,
    #                                         titleStr=str(neuvacBandsMids[bandIndex]), root=False, normalize=False)
    #
    # # 5. sqrt(values from 4 in the 10 sfu bins) vs f107 (for the paper)
    # for bandIndex in chosenBands:
    #     myTitleStr = 'Square Root Differences vs. Binned F10.7: ' + str(neuvacBandsMids[bandIndex]) + ' Angstroms'
    #     F107Bins, binRMSE = toolbox.binCorrelation(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, bandIndex],
    #                                         closestSeeVals[:, bandIndex], step=10, saveLoc=residsDir,
    #                                         titleStr=str(neuvacBandsMids[bandIndex]), root=True, normalize=False)
    #
    # # 6. sqrt(values from 4 in the 10 sfu bins)/SEE measurements * 100% vs f107  (for the paper)
    # for bandIndex in chosenBands:
    #     myTitleStr = 'Normalized Square Root Differences vs. Binned F10.7: ' + str(neuvacBandsMids[bandIndex]) + ' Angstroms'
    #     F107Bins, binRMSE = toolbox.binCorrelation(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, bandIndex],
    #                                         closestSeeVals[:, bandIndex], step=10, saveLoc=residsDir,
    #                                         titleStr=str(neuvacBandsMids[bandIndex]), root=True, normalize=True)

    # TODO: Functionality for adding in correlated noise & uncorrelated noise (separately):

    # 2D plotting of NEUVAC, EUVAC, and HEUVAC:
    from tools.spectralAnalysis import spectralIrradiance
    # band = 7
    # bottomFactor = 1e-1
    # topFactor = 1e1
    # for i in range(37): # (band, band+1):
    #     currentWavelength = np.mean([euvacTable[i][1], euvacTable[i][2]])
    #     dWave = euvacTable[i][2] - euvacTable[i][1]
    #     fig = plt.figure(figsize=(12,6))
    #     ax = fig.add_subplot(111)
    #     ax.plot(times, spectralIrradiance(neuvacRes[:, i], currentWavelength, dWavelength=dWave), 'b-', label='NEUVAC')
    #     # ax.plot(neuvacRes[:, i] * bottomFactor, 'b--')
    #     # ax.plot(neuvacRes[:, i] * topFactor, 'b:')
    #     ax.plot(times, spectralIrradiance(euvacRes[:, i], currentWavelength, dWavelength=dWave), 'g-', label='EUVAC')
    #     ax.plot(times, spectralIrradiance(heuvacRes[:, i], currentWavelength, dWavelength=dWave), 'r-', label='HEUVAC')
    #     # FISM2:
    #     #fismVals = spectralFlux(myIrrDataAllFISM2[:, i][validFISM2inds], currentWavelength, dWavelength=dWave)
    #     fismVals = myIrrDataAllFISM2[:, i][validFISM2inds]
    #     ax.plot(myIrrTimesFISM2[validFISM2inds], fismVals, 'c-', label='FISM2')
    #     ax.legend(loc='best')
    #     ax.set_title('Solar EUV Irradiance at '+str(mids[i])+' Angstroms')
    #     ax.set_xlabel('Time')
    #     ax.set_ylabel('Solar Irradiance (W/m$^2$/nm)')
    #     plt.show()
    #     plt.savefig(figures_directory+'Irradiance_Band_'+str(i+1)+'.png')

    print('Data preparation and model fitting complete.')
#-----------------------------------------------------------------------------------------------------------------------
