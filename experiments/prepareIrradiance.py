# This script prepares irradiances generated by NEUVAC in preparation for comparison to other sources. Those other
# sources include: EUVAC, HEUVAC, FISM1, FISM2, and TIMED/SEE.

#-----------------------------------------------------------------------------------------------------------------------
# Top-level Imports
import numpy as np
import os
import matplotlib
matplotlib.use('Qt5Agg')
import matplotlib.pyplot as plt
from sklearn.metrics import mean_squared_error
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Local Imports
from NEUVAC.src import neuvac
from empiricalModels.models.EUVAC import euvac
from empiricalModels.models.HEUVAC import heuvac
from tools.EUV.fism2_process import read_euv_csv_file
from tools.processIrradiances import obtainFism1
from tools.processIrradiances import obtainFism2
from tools.processIrradiances import obtainSEE, rebinSEE
from tools.processIrradiances import obtainNRLSSIS2, rebinNRL
from tools import toolbox
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Directory Management
figures_directory = 'Figures/'
results_directory = 'Results/'
fism1_spectra_folder = '../empiricalModels/irradiances/FISM1/'
fism2_spectra_folder = '../empiricalModels/irradiances/FISM2/'
euv_folder = '../tools/EUV/'
preparedDataFolder = '../experiments/preparedData'
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Constants
euvacTable = np.array([
    [1, 50, 100, 1.200, 1.0017e-2],
    [2, 100, 150, 0.450, 7.1250e-3],
    [3, 150, 200, 4.800, 1.3375e-2],
    [4, 200, 250, 3.100, 1.9450e-2],
    [5, 256.32, 256.32, 0.460, 2.7750e-3],
    [6, 284.15, 284.15, 0.210, 1.3768e-1],
    [7, 250, 300, 1.679, 2.6467e-2],
    [8, 303.31, 303.31, 0.800, 2.5000e-2],
    [9, 303.78, 303.78, 6.900, 3.3333e-3],
    [10, 300, 350, 0.965, 2.2450e-2],
    [11, 368.07, 368.07, 0.650, 6.5917e-3],
    [12, 350, 400, 0.314, 3.6542e-2],
    [13, 400, 450, 0.383, 7.4083e-3],
    [14, 465.22, 465.22, 0.290, 7.4917e-3],
    [15, 450, 500, 0.285, 2.0225e-2],
    [16, 500, 550, 0.452, 8.7583e-3],
    [17, 554.37, 554.37, 0.720, 3.2667e-3],
    [18, 584.33, 584.33, .270, 5.1583e-3],
    [19, 550, 600, 0.357, 3.6583e-3],
    [20, 609.76, 609.76, 0.530, 1.6175e-2],
    [21, 629.73, 629.73, 1.590, 3.3250e-3],
    [22, 600, 650, 0.342, 1.1800e-2],
    [23, 650, 700, 0.230, 4.2667e-3],
    [24, 703.36, 703.36, 0.360, 3.0417e-3],
    [25, 700, 750, 0.141, 4.7500e-3],
    [26, 765.15, 765.15, 0.170, 3.8500e-3],
    [27, 770.41, 770.41, 0.260, 1.2808e-2],
    [28, 789.36, 789.36, 0.702, 3.2750e-3],
    [29, 750, 800, 0.758, 4.7667e-3],
    [30, 800, 850, 1.625, 4.8167e-3],
    [31, 850, 900, 3.537, 5.6750e-3],
    [32, 900, 950, 3.000, 4.9833e-3],
    [33, 977.02, 977.02, 4.400, 3.9417e-3],
    [34, 950, 1000, 1.475, 4.4167e-3],
    [35, 1025.72, 1025.72, 3.500, 5.1833e-3],
    [36, 1031.91, 1031.91, 2.100, 5.2833e-3],
    [37, 1000, 1050, 2.467, 4.3750e-3]
    ])
#-----------------------------------------------------------------------------------------------------------------------

#-----------------------------------------------------------------------------------------------------------------------
# Execution
if __name__=="__main__":
    # Load in F10.7 data:
    timesData = '../solarIndices/F107/F107times.pkl'
    F107Data = '../solarIndices/F107/F107vals.pkl'
    F107AveData = '../solarIndices/F107/F107averageVals.pkl'
    times = toolbox.loadPickle(timesData)
    F107 = toolbox.loadPickle(F107Data)
    F107A = toolbox.loadPickle(F107AveData)
    # F10.7 data extends between 1947-02-14; 12:00 to 2008-02-03; 12:00.

    # NOTE: NEUVAC, EUVAC, and HEUVAC return spectral fluxes. They'll need to be converted to spectral irradiance.

    # NEUVAC Results:
    neuvacFlux, neuvacIrr = neuvac.neuvacEUV(F107, F107A)
    neuvacCorr = toolbox.covariates(neuvacIrr) # Correlation matrix

    # EUVAC Results:
    euvacRes = euvac.euvac(F107, F107A)

    # HEUVAC Results:
    heuvacRes = heuvac.heuvac(F107, F107A)

    # 3D plotting of NEUVAC, EUVAC, and HEUVAC:
    # bandIndicesNEUVAC = np.linspace(0, neuvacRes.shape[1], neuvacRes.shape[1]+1)
    # bandIndicesEUVAC = np.linspace(0, euvacRes.shape[1], euvacRes.shape[1]+1)
    # fig = plt.figure()
    # ax = fig.add_subplot(111, projection='3d')
    # # NEUVAC
    # for i in range(0, 37): # (neuvacRes.shape[1]):
    #     xvals = np.full_like(neuvacRes[:, i], fill_value=bandIndicesNEUVAC[i])
    #     yvals = np.linspace(0, neuvacRes.shape[0]-1, neuvacRes.shape[0])
    #     plt.plot(xvals, yvals, neuvacRes[:, i]/1e1, 'b-')
    # # EUVAC
    # for i in range(euvacRes.shape[1]): # (neuvacRes.shape[1]):
    #     xvals = np.full_like(euvacRes[:, i], fill_value=bandIndicesEUVAC[i])
    #     yvals = np.linspace(0, euvacRes.shape[0]-1, euvacRes.shape[0])
    #     plt.plot(xvals, yvals, euvacRes[:, i], 'g-')
    # # HEUVAC
    # for i in range(heuvacRes.shape[1]):  # (neuvacRes.shape[1]):
    #     xvals = np.full_like(heuvacRes[:, i], fill_value=bandIndicesEUVAC[i])
    #     yvals = np.linspace(0, heuvacRes.shape[0] - 1, heuvacRes.shape[0])
    #     plt.plot(xvals, yvals, heuvacRes[:, i], 'r-')
    # plt.show()

    # FISM1 Results:
    euv_data_59 = read_euv_csv_file(euv_folder + 'euv_59.csv', band=False)
    mids = 0.5 * (euv_data_59['long'] + euv_data_59['short'])
    myFism1Files = os.listdir(fism1_spectra_folder)
    myTimesFISM1, myIrradianceFISM1 = obtainFism1(myFism1Files, euv_data_59, saveLoc=fism1_spectra_folder)
    # FISM1 data extends between 1990-01-01; 00:00 and 2018-04-10; 00:00.

    # FISM2 Results:
    fism2file = '../empiricalModels/irradiances/FISM2/daily_data_1947-2023.nc'
    myIrrTimesFISM2, myIrrDataAllFISM2, myIrrUncAllFISM2 = obtainFism2(fism2file, euv_data_59, saveLoc=fism2_spectra_folder)
    # FISM2 data extends between 1947-02-14; 00:00 and 2023-08-29; 00:00.

    # NRLSSI2 Results:
    NRLFile = '../empiricalModels/irradiances/NRLSSI2/ssi_v02r01_daily_s18820101_e20221231_c20230123.nc'
    datetimesNRL, wavelengthsNRL, bandwidthsNRL, irradiancesNRL, uncertaintiesNRL = obtainNRLSSIS2(NRLFile)
    rebinnedNRLData = rebinNRL(irradiancesNRL, euv_data_59, wavelengthsNRL, bandwidthsNRL)

    # TIMED/SEE Data:
    seeFile = '../measurements/TIMED_SEE_Level_3/see_L3_merged_1947-2023.ncdf'
    myIrrTimesSEE, mySEEWavelengths, myIrrDataAllSEE, myIrrUncAllSEE = obtainSEE(seeFile)
    rebinnedIrrData = rebinSEE(myIrrDataAllSEE, euv_data_59)
    # Replace bad values (zeros) with NaNs:
    rebinnedIrrDataFixed = rebinnedIrrData.copy()
    rebinnedIrrDataFixed[rebinnedIrrDataFixed == 0] = np.nan
    # TIMED/SEE data extends between 2002-01-22;12:00 and 2023-08-27; 12:00.

    # ------------------------------------------------------------------------------------------------------------------
    # ANALYSIS OF RESIDUALS:
    # Identify the bands in SEE to actually consider:
    goodBands = rebinnedIrrData.any(0)
    # Comparison to TIMED/SEE ONLY:
    F107indices = np.where((times >= myIrrTimesSEE[0]) & (times <= myIrrTimesSEE[-1]))[0]
    F107TimesSeeSubset= times[F107indices]
    F107SeeSubset = F107[F107indices]
    F107ASubset = F107A[F107indices]
    neuvacSubset = neuvacIrr[F107indices, :]
    neuvacSubset = neuvacSubset[:, goodBands]
    # Find elements in TIMED/SEE data nearest to the subsetted F107 times:
    closestSeeInds = []
    closestSeeTimes = []
    for timestamp in F107TimesSeeSubset:
        res = toolbox.find_nearest(myIrrTimesSEE, timestamp)
        closestSeeInds.append(res[0])
        closestSeeTimes.append( res[1] )
    closestSeeInds = np.asarray(closestSeeInds)
    closestSeeTimes = np.asarray(closestSeeTimes)
    closestSeeVals = rebinnedIrrDataFixed[closestSeeInds, :]
    closestSeeVals = closestSeeVals[:, goodBands]
    # Compute residuals:
    neuvacResids = np.subtract(neuvacSubset, closestSeeVals)
    # Sort the residuals by F10.7:
    orderedF107SubsetInds = np.argsort(F107SeeSubset)

    # Plot the time series of irradiance for NEUVAC and TIMED/SEE for each band:
    # for i in range(neuvacResids.shape[1]):
    #     plt.figure(); plt.plot(closestSeeVals[:, i], label='SEE'); plt.plot(neuvacSubset[:, i], label='NEUVAC'); plt.legend(loc='best')

    # Plot the residuals in each band as function of F10.7:
    modelParams = []
    RMSvalsByBand = []
    for i in range(neuvacResids.shape[1]):
        sampleF107 = np.linspace(np.nanmin(F107SeeSubset[orderedF107SubsetInds][0]), np.nanmax(F107SeeSubset[orderedF107SubsetInds][-1]), num=100)
        modelResults = toolbox.bestPolyfit(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i], func='exp')
        # modelResults = toolbox.bestPolyfit(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i])
        plt.figure()
        plt.plot(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i], 'bo')
        # plt.plot(sampleF107, modelResults[0](sampleF107), 'r-', label='Model Fit (order = '+str(modelResults[2])+')')
        plt.plot(sampleF107, modelResults[0][0](sampleF107, *modelResults[0][1]), 'r-',
                label='Exponential Model Fit')
        plt.plot([], [], color='w', alpha=0, label='R='+str(modelResults[1]))
        plt.suptitle('Residuals vs. F10.7: Band '+str(i+1))
        plt.legend(loc='best')
        figname = 'neuvacVsF107_Band_'+str(i+1)+'.png'
        plt.savefig(figures_directory+figname, dpi=300)
        rms = mean_squared_error(neuvacSubset[:, i][~np.isnan(closestSeeVals[:, i])], closestSeeVals[:, i][~np.isnan(closestSeeVals[:, i])], squared=False)
        modelParams.append(modelResults[0])
        RMSvalsByBand.append(rms)

    # Display the RMS by band:
    neuvacBands = np.flipud(neuvac.waveTable)
    goodNeuvacBands = neuvacBands[goodBands, :]
    neuvacBandsMids = 0.5*(goodNeuvacBands[:, 1] + goodNeuvacBands[:, 0])
    plt.figure(figsize=(10,8))
    plt.plot(neuvacBandsMids[np.argsort(neuvacBandsMids)], np.asarray(RMSvalsByBand)[np.argsort(neuvacBandsMids)], 'o-')
    plt.xlabel('Wavelength (Angstroms)')
    plt.ylabel('RMS Error (W/m$^2$/nm)')
    plt.title('EUV Irradiance RMSE vs. Band')
    plt.savefig(figures_directory+'RMSE_vs_band.png', dpi=300)

    # Compute the RMS in each band as a function of F10.7, by binning F10.7 into 10 sfu intervals:
    for i in range(neuvacResids.shape[1]):
        myTitleStr = 'RMSE vs. F10.7: '+str(neuvacBandsMids[i])+' Angstroms'
        F107Bins, binRMSE = toolbox.binCorrelation(F107SeeSubset[orderedF107SubsetInds], neuvacSubset[:, i], closestSeeVals[:, i], step=10, saveLoc=figures_directory, titleStr=str(neuvacBandsMids[i]))

    # TODO: Functionality for adding in correlated noise & uncorrelated noise (separately):

    # 2D plotting of NEUVAC, EUVAC, and HEUVAC:
    from tools.spectralAnalysis import spectralIrradiance
    # band = 7
    # bottomFactor = 1e-1
    # topFactor = 1e1
    # for i in range(37): # (band, band+1):
    #     currentWavelength = np.mean([euvacTable[i][1], euvacTable[i][2]])
    #     dWave = euvacTable[i][2] - euvacTable[i][1]
    #     fig = plt.figure(figsize=(12,6))
    #     ax = fig.add_subplot(111)
    #     ax.plot(times, spectralIrradiance(neuvacRes[:, i], currentWavelength, dWavelength=dWave), 'b-', label='NEUVAC')
    #     # ax.plot(neuvacRes[:, i] * bottomFactor, 'b--')
    #     # ax.plot(neuvacRes[:, i] * topFactor, 'b:')
    #     ax.plot(times, spectralIrradiance(euvacRes[:, i], currentWavelength, dWavelength=dWave), 'g-', label='EUVAC')
    #     ax.plot(times, spectralIrradiance(heuvacRes[:, i], currentWavelength, dWavelength=dWave), 'r-', label='HEUVAC')
    #     # FISM2:
    #     #fismVals = spectralFlux(myIrrDataAllFISM2[:, i][validFISM2inds], currentWavelength, dWavelength=dWave)
    #     fismVals = myIrrDataAllFISM2[:, i][validFISM2inds]
    #     ax.plot(myIrrTimesFISM2[validFISM2inds], fismVals, 'c-', label='FISM2')
    #     ax.legend(loc='best')
    #     ax.set_title('Solar EUV Irradiance at '+str(mids[i])+' Angstroms')
    #     ax.set_xlabel('Time')
    #     ax.set_ylabel('Solar Irradiance (W/m$^2$/nm)')
    #     plt.show()
    #     plt.savefig(figures_directory+'Irradiance_Band_'+str(i+1)+'.png')

    print('Data preparation complete.')
#-----------------------------------------------------------------------------------------------------------------------
